//===============================================================================
// Microsoft patterns & practices
// Smart Client Software Factory 2010
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by this guidance package as part of the solution template
//
// The WorkspaceLocatorService class provides a service to locate a Workspace given a smartpart and
// a WorkItem.
// 
// For more information see: 
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/03-01-010-How_to_Create_Smart_Client_Solutions.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System.Collections.Generic;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.SmartParts;
using QuickStart.Infrastructure.Interface.Services;

namespace QuickStart.Infrastructure.Library.Services
{
    public class WorkspaceLocatorService : IWorkspaceLocatorService
    {
        public IWorkspace FindContainingWorkspace(WorkItem workItem, object smartPart)
        {
            while (workItem != null)
            {
                foreach (KeyValuePair<string, IWorkspace> namedWorkspace in workItem.Workspaces)
                {
                    if (namedWorkspace.Value.SmartParts.Contains(smartPart))
                        return namedWorkspace.Value;
                }
                workItem = workItem.Parent;
            }
            return null;
        }
    }
}
