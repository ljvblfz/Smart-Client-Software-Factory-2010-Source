//===============================================================================
// Microsoft patterns & practices
// Smart Client Software Factory 2010
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using QuickStart.Infrastructure.Interface;
using QuickStart.RestaurantModule.RestaurantService;
using System.Collections.Generic;
using QuickStart.RestaurantModule.Properties;

namespace QuickStart.RestaurantModule
{
    public partial class RestaurantsView : UserControl, IRestaurantsView
    {
        public RestaurantsView()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);
        }

        #region IRestaurantsView Members

        private delegate void ShowRestaurantsDelegate(Restaurant[] restaurants);
        public void ShowRestaurants(IEnumerable<Restaurant> restaurants)
        {
            if (InvokeRequired)
            {
                Invoke(new ShowRestaurantsDelegate(ShowRestaurants), restaurants);
            }
            else
            {
                _restaurantsListView.Visible = true;
                _offlineLabel.Visible = false;
                _errorLabel.Visible = false;
                _retryLabel.Visible = false;

                _restaurantsListView.Items.Clear();
                foreach (Restaurant restaurant in restaurants)
                {
                    ListViewItem item = new ListViewItem(restaurant.Name, _restaurantsListView.Groups["restaurantsGroup"]);
                    item.Tag = restaurant;
                    _restaurantsListView.Items.Add(item);
                }
            }
        }

        private delegate void ShowOfflineMessageDelegate();
        public void ShowOfflineMessage()
        {
            if (InvokeRequired)
            {
                Invoke(new ShowOfflineMessageDelegate(ShowOfflineMessage));
            }
            else
            {
                _restaurantsListView.Visible = false;
                _offlineLabel.Visible = true;
                _errorLabel.Visible = false;
                _retryLabel.Visible = false;
            }
        }

        private delegate void ShowConnectionErrorDelegate();
        public void ShowConnectionError()
        {
            if (InvokeRequired)
            {
                Invoke(new ShowConnectionErrorDelegate(ShowConnectionError));
            }
            else
            {
                _retryLabel.Visible = true;
                _errorLabel.Visible = true;
                _restaurantsListView.Visible = false;
                _offlineLabel.Visible = false;
            }
        }

        #endregion

        private void _restaurantsListView_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_restaurantsListView.SelectedItems.Count > 0)
            {
                _presenter.OnRestaurantSelected((Restaurant)_restaurantsListView.SelectedItems[0].Tag);
            }
        }

        private void _retryLabel_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            _presenter.TryGetRestaurants();
        }
    }
}

