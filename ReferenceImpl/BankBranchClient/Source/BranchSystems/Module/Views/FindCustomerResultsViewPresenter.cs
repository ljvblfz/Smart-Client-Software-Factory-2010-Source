//===============================================================================
// Microsoft patterns & practices
// Smart Client Software Factory 2010
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using GlobalBank.BranchSystems.Interface.Constants;
using GlobalBank.BranchSystems.Interface.Services;
using GlobalBank.Infrastructure.Interface;
using GlobalBank.Infrastructure.Interface.BusinessEntities;
using GlobalBank.Infrastructure.Interface.Services;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;

namespace GlobalBank.BranchSystems.Module.Views
{
	public class FindCustomerResultsViewPresenter : Presenter<IFindCustomerResultsView>
	{
		[EventPublication(EventTopicNames.PersonAddedToQueue, PublicationScope.Global)]
		public event EventHandler<EventArgs<Person>> PersonAddedToQueue;

		private ICustomerQueueService _queueService = null;
		private Customer[] _response = null;

		[InjectionConstructor]
		public FindCustomerResultsViewPresenter
			(
			[ComponentDependency("FindCustomerResponse")] Customer[] response,
			[ServiceDependency] ICustomerQueueService queueService
			)
		{
			_queueService = queueService;
			_response = response;
		}	

		protected virtual void OnPersonAddedToQueue(Customer customer)
		{
			if (PersonAddedToQueue != null)
			{
				PersonAddedToQueue(this, new EventArgs<Person>(customer));
			}
		}

		public void AddReasonForVisit(Customer customer)
		{
			if (WorkItem.Items.Contains("CustomerToAdd"))
				WorkItem.Items.Remove(WorkItem.Items.Get("CustomerToAdd"));
			WorkItem.Items.Add(customer, "CustomerToAdd");
			AddVisitorToQueueView addView = WorkItem.SmartParts.AddNew<AddVisitorToQueueView>();
			GetViewWorkspace().Show(addView);
		}

		private IWorkspace GetViewWorkspace()
		{
			IWorkspaceLocatorService locator = WorkItem.Services.Get<IWorkspaceLocatorService>();
			IWorkspace workspace = locator.FindContainingWorkspace(WorkItem, View);
			return workspace;
		}

		public override void OnViewReady()
		{
			View.ShowResults(_response);
		}

		public void OnCancel()
		{
			CloseView();

			// As we are closing and re-creating this view several times, we need to Dispose the view
			if (View is IDisposable) ((IDisposable) View).Dispose();
		}
	}
}
