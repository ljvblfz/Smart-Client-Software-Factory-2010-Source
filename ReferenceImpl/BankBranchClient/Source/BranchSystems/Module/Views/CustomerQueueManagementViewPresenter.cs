//===============================================================================
// Microsoft patterns & practices
// Smart Client Software Factory 2010
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using GlobalBank.BranchSystems.Interface.Constants;
using GlobalBank.BranchSystems.Interface.Services;
using GlobalBank.Infrastructure.Interface;
using GlobalBank.Infrastructure.Interface.BusinessEntities;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;

namespace GlobalBank.BranchSystems.Module.Views
{
	public class CustomerQueueManagementViewPresenter : Presenter<ICustomerQueueManagementView>
	{
		[EventPublication(EventTopicNames.CustomerQueueUpdate, PublicationScope.Global)]
		public event EventHandler<EventArgs<QueueEntry[]>> CustomerQueueUpdate;

		[EventPublication(EventTopicNames.StatusUpdate, PublicationScope.Global)]
		public event EventHandler<EventArgs<string>> StatusUpdate;

		private ICustomerQueueService _queueService = null;
		private ICurrentQueueEntryService _queueEntryService = null;

		public CustomerQueueManagementViewPresenter
			(
			[ServiceDependency] ICustomerQueueService queueService,
			[ServiceDependency] ICurrentQueueEntryService queueEntryService
			)
		{
			_queueService = queueService;
			_queueEntryService = queueEntryService;
		}

		[EventSubscription(EventTopicNames.PersonAddedToQueue, ThreadOption.UserInterface)]
		public void OnPersonAddedToQueue(object sender, EventArgs<Person> eventArgs)
		{
			UpdateCustomerQueue();
		}

		public void UpdateCustomerQueue()
		{
			QueueEntry[] entries = null;
			try
			{
				entries = _queueService.GetEntries();
				OnCustomerQueueUpdate(entries);
				View.UpdateCustomerQueue(entries);
				OnStatusUpdate(Properties.Resources.ReadyMessage);
			}
			catch
			{
				OnStatusUpdate(Properties.Resources.CustomerQueueServiceDownMessage);
			}
		}

		public void NewEntrySelected(QueueEntry queueEntry)
		{
			_queueEntryService.CurrentEntry = queueEntry;
		}

		public override void OnViewReady()
		{
			base.OnViewReady();
			UpdateCustomerQueue();
		}

		protected virtual void OnCustomerQueueUpdate(QueueEntry[] queue)
		{
			if (CustomerQueueUpdate != null)
			{
				CustomerQueueUpdate(this, new EventArgs<QueueEntry[]>(queue));
			}
		}

		protected virtual void OnStatusUpdate(string message)
		{
			if (StatusUpdate != null)
			{
				StatusUpdate(this, new EventArgs<string>(message));
			}
		}
	}
}
