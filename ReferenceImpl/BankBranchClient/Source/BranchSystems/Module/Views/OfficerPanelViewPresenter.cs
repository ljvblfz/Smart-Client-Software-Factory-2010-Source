//===============================================================================
// Microsoft patterns & practices
// Smart Client Software Factory 2010
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Threading;
using GlobalBank.BranchSystems.Interface.Constants;
using GlobalBank.BranchSystems.Interface.Services;
using GlobalBank.Infrastructure.Interface;
using GlobalBank.Infrastructure.Interface.BusinessEntities;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;
using Microsoft.Practices.ObjectBuilder;

namespace GlobalBank.BranchSystems.Module.Views
{
	public class OfficerPanelViewPresenter : Presenter<IOfficerPanelView>
	{
		[EventPublication(EventTopicNames.CustomerServicingChanged, PublicationScope.Global)]
		public event EventHandler<EventArgs<QueueEntry>> CustomerServicingChanged;

		[EventPublication(EventTopicNames.StatusUpdate, PublicationScope.Global)]
		public event EventHandler<EventArgs<string>> StatusUpdate;

		private ICustomerQueueService _queueService = null;
		private ICurrentQueueEntryService _currentQueueEntryService = null;

		[InjectionConstructor]
		public OfficerPanelViewPresenter
			(
			[ServiceDependency] ICustomerQueueService queueService,
			[ServiceDependency] ICurrentQueueEntryService currentQueueEntryService
			)
		{
			_queueService = queueService;
			_currentQueueEntryService = currentQueueEntryService;
		}


		public void UpdateQueue()
		{
			QueueEntry[] entries = null;
			try
			{
				entries = GetQueueUpdates();
				View.ShowQueue(entries);
				if (_currentQueueEntryService.CurrentEntry != null)
				{
					View.SelectServicedCustomer(_currentQueueEntryService.CurrentEntry);
				}
				OnStatusUpdate(Properties.Resources.ReadyMessage);
			}
			catch
			{
				OnStatusUpdate(Properties.Resources.CustomerQueueServiceDownMessage);
			}
		}

		public void ServiceCustomer(QueueEntry entry)
		{
			OnCustomerServicingChanged(entry);
		}

		public void NewEntrySelected(QueueEntry entry)
		{
			_currentQueueEntryService.CurrentEntry = entry;
		}

		public override void OnViewReady()
		{
			UpdateQueue();
		}

		protected virtual QueueEntry[] GetQueueUpdates()
		{
			return _queueService.GetMyEntries(Thread.CurrentPrincipal.Identity.Name);
		}

		protected virtual void OnCustomerServicingChanged(QueueEntry entry)
		{
			if (CustomerServicingChanged != null)
				CustomerServicingChanged(this, new EventArgs<QueueEntry>(entry));
		}

		protected virtual void OnStatusUpdate(string message)
		{
			if (StatusUpdate != null)
				StatusUpdate(this, new EventArgs<string>(message));
		}
	}
}
