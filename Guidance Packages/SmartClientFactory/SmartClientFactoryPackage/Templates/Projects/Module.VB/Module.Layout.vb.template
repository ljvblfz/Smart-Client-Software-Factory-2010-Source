'----------------------------------------------------------------------------------------
'patterns & practices - Smart Client Software Factory - Guidance Package
'
'This file was generated by the "Add Foundational Module" recipe.
'
'The Module class derives from the CAB base class ModuleInit and it will be instantiated
'when the module is loaded by the CAB infrastructure.
'
'

'
'Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
'----------------------------------------------------------------------------------------

Imports Microsoft.Practices.CompositeUI
Imports Microsoft.Practices.ObjectBuilder
Imports Microsoft.Practices.CompositeUI.Services
Imports $ModuleNamespace$.Constants

Public Class ModuleInitializer
    Inherits ModuleInit

    Private _rootWorkItem As WorkItem

    <InjectionConstructor()> _
    Public Sub New(<ServiceDependency()> ByVal rootWorkItem As WorkItem)
        _rootWorkItem = rootWorkItem
    End Sub

    Public Overrides Sub Load()
        MyBase.Load()
        ' NOTE: 
        ' The layout view in this module defines the layout of the shell. To do this, it
        ' loads its view into a shell Workspace named "LayoutWorkspace". If the shell does 
        ' not contain a Workspace with this name, the module will throw a ModuleLoadException exception. 
        ' 
        ' If you see this exception, you can modify the ShowLayoutView method to use a Workspace 
        ' name available in shell, or change the name of a Workspace in the shell to "LayoutWorkspace".
        ShowLayoutView()
    End Sub

    Private Sub ShowLayoutView()
        If _rootWorkItem.Workspaces.Contains(WorkspaceNames.LayoutWorkspace) Then

            Dim layout As LayoutView = _rootWorkItem.Items.AddNew(Of LayoutView)()

            _rootWorkItem.Workspaces(WorkspaceNames.LayoutWorkspace).Show(layout)

        Else
            Throw New ModuleLoadException("LayoutWorkpsace not found")
        End If
    End Sub

End Class
