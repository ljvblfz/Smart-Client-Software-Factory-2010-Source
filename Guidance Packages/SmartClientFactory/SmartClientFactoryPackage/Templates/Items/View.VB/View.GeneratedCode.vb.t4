<#@ template language="C#" #>
<#@ assembly name="System.dll" #>
<#@ property processor="PropertyProcessor" name="ClassName" #>
<#@ property processor="PropertyProcessor" name="TargetNamespace" #>
<#@ property processor="PropertyProcessor" name="RootNamespace" #>
'----------------------------------------------------------------------------------------
'patterns & practices - Smart Client Software Factory - Guidance Package
'
'This file was generated by the "Add View" recipe.
'
'This class is the concrete implementation of a View in the Model-View-Presenter 
'pattern. Communication between the Presenter and this class is acheived through 
'an interface to facilitate separation and testability.
'Note that the Presenter generated by the same recipe, will automatically be created
'by CAB through [CreateNew] and bidirectional references will be added.
'
'

'
'Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
'----------------------------------------------------------------------------------------

Imports System
Imports Microsoft.Practices.CompositeUI.SmartParts
Imports Microsoft.Practices.ObjectBuilder
Imports <#= RootNamespace #>.Infrastructure.Interface

<SmartPart()> _
Partial Public Class <#= ClassName #>

    ''' <summary>
    ''' Sets the presenter. The dependency injection system will automatically
    ''' create a new presenter for you.
    ''' </summary>
    <CreateNew()> _
    Public WriteOnly Property Presenter() As <#= ClassName #>Presenter
        Set(ByVal value As <#= ClassName #>Presenter)
            _presenter = value
            _presenter.View = Me
        End Set
    End Property
End Class
