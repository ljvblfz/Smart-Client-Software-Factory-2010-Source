<#@ template language="C#" #>
<#@ assembly name="System.dll" #>
<#@ property processor="PropertyProcessor" name="ClassName" #>
<#@ property processor="PropertyProcessor" name="TargetNamespace" #>
<#@ property processor="PropertyProcessor" name="RootNamespace" #>
'----------------------------------------------------------------------------------------
'patterns & practices - Smart Client Software Factory - Guidance Package
'
'This file was generated by the "Add WPF View" recipe.
'
'This class is the concrete implementation of a View in the Model-View-Presenter 
'pattern. Communication between the Presenter and this class is acheived through 
'an interface to facilitate separation and testability.
'Note that the Presenter generated by the same recipe, will automatically be created
'by CAB through [CreateNew] and bidirectional references will be added.
'
'

'
'Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
'----------------------------------------------------------------------------------------

Imports System
Imports System.Windows
Imports Microsoft.Practices.CompositeUI
Imports Microsoft.Practices.CompositeUI.SmartParts
Imports Microsoft.Practices.CompositeUI.WPF
Imports Microsoft.Practices.ObjectBuilder

Imports <#= RootNamespace #>.Infrastructure.Interface

Partial Public Class <#= ClassName #>
    Inherits System.Windows.Controls.UserControl
    Implements I<#= ClassName #>
    Implements IDisposable

    Private _presenter As <#= ClassName #>Presenter
    Private _WPFUIElementAdapter As IWPFUIElementAdapter
    Private _isDisposing as Boolean = false

    ''' <summary>
    ''' Sets the presenter. The dependency injection system will automatically
    ''' create a new presenter for you.
    ''' </summary>
    <CreateNew()> _
    Public WriteOnly Property Presenter() As <#= ClassName #>Presenter
        Set(ByVal value As <#= ClassName #>Presenter)
            _presenter = value
            _presenter.View = Me
        End Set
    End Property

    ''' <summary>
    ''' Get or set the WPF UI Element adapter service.
    ''' </summary>
    <ServiceDependency> _
    Public Property WPFUIElementAdapter() As IWPFUIElementAdapter
        Get
            Return _WPFUIElementAdapter
        End Get
        Set(ByVal value as IWPFUIElementAdapter)
            _WPFUIElementAdapter = value
        End Set
    End Property
    
#Region " IDisposable Members "

    ''' <summary>
    ''' Performs application-defined tasks associated with freeing, 
    ''' releasing, or resetting unmanaged resources.
    ''' </summary>
    ''' <remarks>
    ''' See the <see cref="IDisposable"/> interface documentation for
    ''' more information. This class uses IDisposable to ensure that the
    ''' presenter is properly cleaned up.
    ''' </remarks>
    Public Sub Dispose() Implements IDisposable.Dispose
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
   
#End Region

#Region " Resource Reclamation Support "

    Protected Overrides Sub Finalize()
        Dispose(false)
    End Sub

    ''' <summary>
    ''' Returns true if this object has had the Dispose method called.
    ''' </summary>
    Public ReadOnly Property Disposed() As Boolean
        Get
            Return _presenter Is Nothing AndAlso _WPFUIElementAdapter Is Nothing
        End Get
    End Property

    ''' <summary>
    ''' Returns true if this object is in the process of being disposed.
    ''' </summary>
    Public ReadOnly Property Disposing() As Boolean
        Get
            Return _isDisposing
        End Get
    End Property

    ''' <summary>
    ''' Clean up the unmanaged resources used by this object.
    ''' </summary>
    ''' <remarks>
    ''' For this class, this call is important to clean up the
    ''' presenter and the underlying UI infrastructure.
    ''' </remarks>
    ''' <param name="disposing">True if we should clean up managed resources, false if
    ''' we should only clean up unmanaged resources.</param>    
    Protected Overridable Sub Dispose(ByVal disposing as Boolean)
        If Not Disposed AndAlso Not _isDisposing Then
            _isDisposing = True
            If disposing Then
                If _presenter IsNot Nothing Then
                    _presenter.Dispose()
                    _presenter = Nothing
                End If
                
                If _WPFUIElementAdapter IsNot Nothing Then
                    Dim host as System.Windows.Forms.Control = _WPFUIElementAdapter.Wrap(Me)
                    if Not host.Disposing Then
                        host.Dispose()
                    End If
                    _WPFUIElementAdapter = Nothing
                End If
            End If
        End If
    End Sub

#End Region

End Class
