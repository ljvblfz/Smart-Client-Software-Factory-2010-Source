<#@ template language="C#" #>
<#@ assembly name="System.dll" #>
<#@ property processor="PropertyProcessor" name="ClassName" #>
<#@ property processor="PropertyProcessor" name="TargetNamespace" #>
<#@ property processor="PropertyProcessor" name="RootNamespace" #>
//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add WPF View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// 
//
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.CompositeUI.WPF;
using Microsoft.Practices.ObjectBuilder;

using <#= RootNamespace #>.Infrastructure.Interface;

namespace <#= TargetNamespace #>
{
    /// <summary>
    /// Interaction logic for <#= ClassName #>.xaml
    /// </summary>
    [SmartPart]
    public partial class <#= ClassName #> 
    {
        private <#= ClassName #>Presenter _presenter;
        private IWPFUIElementAdapter _WPFUIElementAdapter;
        private bool _isDisposing = false;
        
        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public <#= ClassName #>Presenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }
        
        /// <summary>
        /// Get or set the WPF UI Element adapter service.
        /// </summary>
        [ServiceDependency]
        public IWPFUIElementAdapter WPFUIElementAdapter
        {
            get { return _WPFUIElementAdapter; }
            set { _WPFUIElementAdapter = value; }
        }
        
        #region IDisposable Members
        
        /// <summary>
        /// Performs application-defined tasks associated with freeing, 
        /// releasing, or resetting unmanaged resources.
        /// <summary>
        /// <remarks>
        /// See the <see cref="IDisposable"/> interface documentation for
        /// more information. This class uses IDisposable to ensure that the
        /// presenter is properly cleaned up.
        /// </remarks>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        
        #endregion
        
        #region Resource Reclamation Support
        
        ~<#= ClassName #>()
        {
            Dispose(false);
        }
    
        /// <summary>
        /// Returns true if this object has had the Dispose method called.
        /// </summary>
        public bool Disposed
        {
            get { return _presenter == null && _WPFUIElementAdapter == null; }
        }
        
        /// <summary>
        /// Returns true if this object is in the process of being disposed.
        /// </summary>
        public bool Disposing
        {
            get { return _isDisposing; }
        }
        
        /// <summary>
        /// Clean up the unmanaged resources used by this object.
        /// </summary>
        /// <remarks>
        /// For this class, this call is important to clean up the
        /// presenter and the underlying UI infrastructure.
        /// </remarks>
        /// <param name="disposing">True if we should clean up managed resources, false if
        /// we should only clean up unmanaged resources.</param>
        protected virtual void Dispose(bool disposing)
        {
            if (!Disposed && !_isDisposing)
            {
                _isDisposing = true;
                if (disposing)
                {
                    if (_presenter != null)
                    {
                        _presenter.Dispose();
                        _presenter = null;
                    }
                    
                    if (_WPFUIElementAdapter != null)
                    {
                        System.Windows.Forms.Control host = _WPFUIElementAdapter.Wrap(this);
                        if (!host.Disposing)
                        {
                            host.Dispose();
                        }
                        _WPFUIElementAdapter = null;
                    }
                }
            }
        }
        
        #endregion
        
    }
}
