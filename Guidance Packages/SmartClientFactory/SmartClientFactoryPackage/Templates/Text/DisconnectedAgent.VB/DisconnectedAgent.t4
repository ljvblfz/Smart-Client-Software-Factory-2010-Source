<#@ Template Language="C#" #>
<#@ Assembly Name="System.dll" #>
<#@ Assembly Name = "Microsoft.Practices.SmartClientFactory.GuidancePackage.dll" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Reflection" #>
<#@ Import Namespace="System.Text" #>
<#@ Import Namespace="Microsoft.Practices.SmartClientFactory" #>
<#@ Import Namespace="Microsoft.Practices.SmartClientFactory.Converters" #>
<#@ property processor="PropertyProcessor" Name="ProxyType" #>
<#@ property processor="PropertyProcessor" Name="ProxyFactoryTypeFullName" #>
<#@ property processor="PropertyProcessor" Name="MethodsList" #>
<#@ property processor="PropertyProcessor" Name="TargetNamespace" #>
<#@ property processor="PropertyProcessor" Name="Behaviors" #>
<#@ property processor="PropertyProcessor" Name="Endpoint" #>
<#@ property processor="PropertyProcessor" Name="Expiration" #>
<#@ property processor="PropertyProcessor" Name="MaxRetries" #>
<#@ property processor="PropertyProcessor" Name="Stamps" #>
<#@ property processor="PropertyProcessor" Name="Tag" #>
Imports Microsoft.Practices.SmartClient.DisconnectedAgent
<#= RenderImports(ProxyMethodsConverter.GetMethods(this.ProxyType, this.MethodsList)) #>

Namespace <#= this.TargetNamespace #>
	' Generated code for the web service.
	' Use this proxy to make requests to the service when working in an application that is occasionally connected
    Partial Public Class Agent
    
		Dim requestQueue as IRequestQueue

		Public Sub New(ByVal requestQueue as IRequestQueue)
		
			Me.requestQueue = requestQueue
		End Sub
<# 
	MethodBehaviors behaviors = AgentTemplateHelper.BuildBehaviors(this.ProxyType, this.Behaviors, this.MethodsList);
	Dictionary<string, int> overloadedMethods = new Dictionary<string, int>();

	foreach (MethodBehavior behavior in behaviors)
	{
		string paramDeclarations = GetParameterDeclarations(behavior.Method.GetParameters());
		string paramReferences = GetParameterReferences(behavior.Method.GetParameters());

		bool hasOverloads=AgentTemplateHelper.HasOverloadedMethods(behavior.Method.Name, behaviors);
		string GetDefaultBehaviorMethodName=String.Format("Get{0}DefaultBehavior",behavior.Method.Name);
		string OnReturnMethodName=String.Format("On{0}Return",behavior.Method.Name);
		string OnExceptionMethodName=String.Format("On{0}Exception",behavior.Method.Name);

		if (hasOverloads)
		{
			int overloadedMethodCount=AgentTemplateHelper.GetOverloadedMethodCount(behavior.Method.Name, overloadedMethods);
			GetDefaultBehaviorMethodName=String.Format("Get{0}{1}DefaultBehavior",behavior.Method.Name,overloadedMethodCount);
			OnReturnMethodName=String.Format("On{0}{1}Return",behavior.Method.Name,overloadedMethodCount);
			OnExceptionMethodName=String.Format("On{0}{1}Exception",behavior.Method.Name,overloadedMethodCount);
		}
#>
	
		#Region "<#= behavior.Method.Name #>"

		''' <summary>
		''' Enqueues a request to the <c><#= behavior.Method.Name #></c> web service method through the agent.
		''' </summary>
		''' <returns>The unique identifier associated with the request that was enqueued.</returns>
		Public Function <#= behavior.Method.Name #>(<#= paramDeclarations #>) As Guid
		
			Return <#= behavior.Method.Name #>(<#= paramReferences.Length == 0 ? "" : paramReferences + ", " #><#= GetDefaultBehaviorMethodName #>())
		End Function
		
		''' <summary>
		''' Enqueues a request to the <c><#= behavior.Method.Name #></c> web service method through the agent.
		''' </summary>
		''' <param name="behavior">The behavior associated with the offline request being enqueued.</param>
		''' <returns>The unique identifier associated with the request that was enqueued.</returns>
		Public Function <#= behavior.Method.Name #>(<#= paramDeclarations.Length == 0 ? "" : paramDeclarations + ", " #>behavior As OfflineBehavior) As Guid
		
			behavior.ReturnCallback = new CommandCallback(GetType(Callback), "<#= OnReturnMethodName #>")
			behavior.ExceptionCallback = new CommandCallback(GetType(Callback), "<#= OnExceptionMethodName #>")
		
			Return EnqueueRequest("<#= behavior.Method.Name #>", behavior<#= paramReferences.Length == 0 ? "" : ", New Object() {" + paramReferences  + "}" #>)
		End Function

		Public Shared Function <#= GetDefaultBehaviorMethodName #>() As OfflineBehavior 
		
			Dim behavior As OfflineBehavior = GetAgentDefaultBehavior()
			behavior.ReturnCallback = new CommandCallback(GetType(Callback), "<#= OnReturnMethodName #>")
			behavior.ExceptionCallback = new CommandCallback(GetType(Callback), "<#= OnExceptionMethodName #>")
			
<#	if (behavior.IsOverride)
	{ #>
<#
		if (behavior.MaxRetries.HasValue) 
		{ #>
			behavior.MaxRetries = <#= behavior.MaxRetries #>
		<# }
		if (behavior.Stamps.HasValue) 
		{ #>
			behavior.Stamps = <#= behavior.Stamps #>
		<# }
		if (behavior.Expiration.HasValue) 
		{ 
		  #>
			behavior.Expiration = DateTime.Now + new TimeSpan(<#= behavior.Expiration.Value.Days #>,<#= behavior.Expiration.Value.Hours #>,<#= behavior.Expiration.Value.Minutes #>,<#= behavior.Expiration.Value.Seconds #>)
		<# } #>
<#
	} // end if (behavior.IsOverride)
#>
			Return behavior
	End Function

		#End Region
<# 
	} // end foreach (MethodBehavior behavior in behaviors)
#>
	
		#Region "Common"

		Public Shared Function GetAgentDefaultBehavior() As OfflineBehavior
		
			Dim behavior As New OfflineBehavior()
			behavior.MaxRetries = <#= this.MaxRetries #>
			behavior.Stamps = <#= this.Stamps #><#
		  if (this.Tag != null) 
		  { #>
			
			behavior.Tag = "<#= this.Tag #>"<#
		  }
		  if (this.Expiration.HasValue) 
		  { #>
			
			behavior.Expiration = DateTime.Now + new TimeSpan(<#= this.Expiration.Value.Days #>,<#= this.Expiration.Value.Hours #>,<#= this.Expiration.Value.Minutes #>,<#= this.Expiration.Value.Seconds #>)<#
		  } #>
		  
			behavior.ProxyFactoryType = GetType(<#= this.ProxyFactoryTypeFullName #>)
			
			Return behavior
		End Function

		Private Function EnqueueRequest(ByVal methodName As String, ByVal behavior As OfflineBehavior , Optional ByVal arguments as Object() = Nothing) As Guid
		
			Dim request As Request = CreateRequest(methodName, behavior, arguments)
			
			requestQueue.Enqueue(request)
			
			Return request.RequestId
		End Function

		Private Shared Function CreateRequest(methodName As String, behavior As OfflineBehavior, optional ByVal arguments As Object() = Nothing) As Request
		
			Dim request As New Request()
			request.MethodName = methodName
			request.Behavior = behavior
			request.CallParameters = arguments

			request.OnlineProxyType = OnlineProxyType
			request.Endpoint = Endpoint
			
			Return request
		End Function

		Public Shared ReadOnly Property OnlineProxyType() As Type
			Get
				Return GetType(<#= this.ProxyType.FullName #>)
			End Get
		End Property

		Public Shared ReadOnly Property Endpoint() As String
			Get
			<# if (this.Endpoint.Equals(String.Empty))
            {#>
				Return String.Empty
            <#
            }
            else
            {
            #>
				Return "<#= this.Endpoint #>"
            <#}#>
			End Get
		End Property
		#End Region
    End Class

End Namespace
<#@ Include File="Templates\Text\DisconnectedAgent.VB\DisconnectedAgentHelpers.vb.t4" #>
