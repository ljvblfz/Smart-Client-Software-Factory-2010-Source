'----------------------------------------------------------------------------------------
' patterns & practices - Smart Client Software Factory - Guidance Package
'
' This file was generated by this guidance package as part of the solution template
'
' This class contains code that otherwise would be repeated in every presenter when using the M-V-P pattern. 
' It includes a reference to a generic view and a reference to the WorkItem it belongs. 
' It also provides virtual methods to work with the controlled view
'
'  
'
'
' Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
'----------------------------------------------------------------------------------------

Imports Microsoft.Practices.CompositeUI
Imports System
Imports Microsoft.Practices.CompositeUI.SmartParts

Public MustInherit Class Presenter(Of TView)
    Implements IDisposable

    Private _view As TView
    Private _workItem As WorkItem
    Private _disposed As Boolean = False

    Public Property View() As TView
        Get
            Return _view
        End Get
        Set(ByVal value As TView)
            _view = value
            OnViewSet()
        End Set
    End Property

    <ServiceDependency()> _
    Public Property WorkItem() As WorkItem
        Get
            Return _workItem
        End Get
        Set(ByVal value As WorkItem)
            _workItem = value
        End Set
    End Property

    Protected Overridable Sub CloseView()
        Dim locator As Services.IWorkspaceLocatorService = WorkItem.Services.Get(Of Services.IWorkspaceLocatorService)()

        Dim wks As IWorkspace = locator.FindContainingWorkspace(WorkItem, View)

        If Not wks Is Nothing Then
            wks.Close(View)
        End If
    End Sub

    Public Overridable Sub OnViewReady()
    End Sub

    Protected Overridable Sub OnViewSet()
    End Sub
    
    Public Overridable Sub OnCloseView()
    End Sub

    ''' <summary>
    ''' See <see cref="System.IDisposable.Dispose"/> for more information.
    ''' </summary>
    Public Sub Dispose() Implements IDisposable.Dispose
        If Not _disposed Then
			Dispose(True)
			GC.SuppressFinalize(Me)
		End If
    End Sub

    ''' <summary>
    ''' Called when the object is being disposed or finalized.
    ''' </summary>
    ''' <param name="disposing">True when the object is being disposed (and therefore can
    ''' access managed members); false when the object is being finalized without first
    ''' having been disposed (and therefore can only touch unmanaged members).</param>
    Protected Overridable Sub Dispose(ByVal disposing As Boolean)
		If disposing Then
			If Not _workItem Is Nothing Then
				If Not Me.View Is Nothing Then
					OnCloseView()
					_workItem.Items.Remove(Me.View)
				End If
 
				_workItem.Items.Remove(Me)
			End If
		End If
		
		_disposed = True
    End Sub
End Class
