'----------------------------------------------------------------------------------------
'patterns & practices - Smart Client Software Factory - Guidance Package
'
'This file was generated by this guidance package as part of the solution template
'
'The ShellApplication class is the entry point for your application. ShellApplication 
'contains the Main method and derives from FormShellApplication base class which is
'provided by the Composite UI Application Block (CAB).
' 
'Note that the RootWorkItem is the default WorkItem provided by CAB.
' 
'It also implements basic exception handling using Enterprise Library Exception
'Handling Application Block.
'
'The shell in this Guidance Package (ShellForm) has a DeckWorkspace called LayoutWorkspace
'The default layout is defined in a separate module called Infrastructure.Layout. This module
'has a usercontorl ShellLayoutView which has a left and right workspace.
'
' 

'
'Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
'----------------------------------------------------------------------------------------

Imports System
Imports System.Windows.Forms
Imports $RootNamespace$.Infrastructure.Library
Imports Microsoft.Practices.CompositeUI
Imports Microsoft.Practices.EnterpriseLibrary.ExceptionHandling

''' <summary>
''' Main application entry point class.
''' Note that the class derives from CAB supplied base class FormShellApplication, and the 
''' main form will be ShellForm, also created by default by this solution template
'''</summary>
Class ShellApplication
    Inherits SmartClientApplication(Of WorkItem, ShellForm)

    <STAThread()> _
    Shared Sub Main()
#If DEBUG Then
        RunInDebugMode()
#Else
        RunInReleaseMode()
#End If
    End Sub

    Private Shared Sub RunInDebugMode()
        Application.SetCompatibleTextRenderingDefault(False)
        Dim shellApp As New ShellApplication()
        shellApp.Run()
    End Sub

    Private Shared Sub RunInReleaseMode()
        AddHandler AppDomain.CurrentDomain.UnhandledException, AddressOf AppDomainUnhandledException
      
        Application.SetCompatibleTextRenderingDefault(False)
        Try
            Dim shellApp As New ShellApplication()
            shellApp.Run()
        Catch ex As Exception
            HandleException(ex)
        End Try
    End Sub

    Private Shared Sub AppDomainUnhandledException(ByVal sender As Object, ByVal e As UnhandledExceptionEventArgs)
        HandleException((CType(e.ExceptionObject, Exception)))
    End Sub

    Private Shared Sub HandleException(ByVal ex As Exception)
        If ex Is Nothing Then
            Return
        End If

        ExceptionPolicy.HandleException(ex, "Default Policy")
        MessageBox.Show("An unhandled exception occurred, and the application is terminating. For more information, see your Application event log.")
        Application.Exit()
    End Sub

End Class
