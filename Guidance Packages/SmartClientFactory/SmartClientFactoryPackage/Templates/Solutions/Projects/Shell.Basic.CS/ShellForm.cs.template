//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by this guidance package as part of the solution template
//
// The FormShell class represent the main form of your application.
// 
// The default Form supplied in this guidance package provides basic UI elements 
// like:
//      - A MenuStrip
//      - A ToolStrip
//      - A StatusStrip
//      - 2 WorkSpaces (left and right) separated by a spliter
//
// There is also a subscription to the "StatusUpdate" event topic used to change the
// content of the StatusStrip
//
//  
//
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using $RootNamespace$.Infrastructure.Interface;
using $RootNamespace$.Infrastructure.Shell.Constants;
using Microsoft.Practices.CompositeUI.EventBroker;

namespace $RootNamespace$.Infrastructure.Shell
{
	/// <summary>
	/// Main application shell view.
	/// </summary>
	public partial class ShellForm : Form
	{
		/// <summary>
		/// Default class initializer.
		/// </summary>
		public ShellForm()
		{
			InitializeComponent();

			_leftWorkspace.Name = WorkspaceNames.LeftWorkspace;
			_rightWorkspace.Name = WorkspaceNames.RightWorkspace;
		}

		/// <summary>
		/// Gets a reference for the application statusbar (<see cref="StatusStrip"/>) object.
		/// </summary>
		internal StatusStrip MainStatusStrip
		{
			get { return _mainStatusStrip; }
		}

		/// <summary>
		/// Gets a reference for the default application toolbar (<see cref="ToolStrip"/>) object.
		/// </summary>
		internal ToolStrip MainToolbarStrip
		{
			get { return _mainToolStrip; }
		}

		/// <summary>
		/// Status update handler. Updates the status strip on the main form.
		/// </summary>
		/// <param name="sender">The sender.</param>
		/// <param name="e">The e.</param>
		[EventSubscription(EventTopicNames.StatusUpdate, ThreadOption.UserInterface)]
		public void StatusUpdateHandler(object sender, EventArgs<string> e)
		{
			_statusLabel.Text = e.Data;
		}

		/// <summary>
		/// Close the application.
		/// </summary>
		private void OnFileExit(object sender, EventArgs e)
		{
			Close();
		}
	}
}
