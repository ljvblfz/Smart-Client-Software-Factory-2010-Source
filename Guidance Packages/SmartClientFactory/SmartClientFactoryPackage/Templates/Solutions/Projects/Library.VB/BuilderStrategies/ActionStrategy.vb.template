'----------------------------------------------------------------------------------------
'patterns & practices - Smart Client Software Factory - Guidance Package
'
'This file was generated by this guidance package as part of the solution template
'
'The ActionStrategy class is an ObjectBuilder builder strategy that will register all methods
'decorated with the ActionAttribute in the IActionCatalogService
'
' 

'
'Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
'----------------------------------------------------------------------------------------

Imports System
Imports System.Reflection
Imports Microsoft.Practices.CompositeUI
Imports Microsoft.Practices.ObjectBuilder
Imports $RootNamespace$.Infrastructure.Interface.Services
Imports $RootNamespace$.Infrastructure.Interface

Namespace BuilderStrategies

    Public Class ActionStrategy
        Inherits BuilderStrategy

        Public Overrides Function BuildUp(ByVal context As Microsoft.Practices.ObjectBuilder.IBuilderContext, ByVal typeToBuild As System.Type, ByVal existing As Object, ByVal idToBuild As String) As Object
            Dim workItem As WorkItem = GetWorkItem(context, existing)

            If Not workItem Is Nothing Then
                Dim actionCatalog As IActionCatalogService = workItem.Services.Get(Of IActionCatalogService)()

                If Not actionCatalog Is Nothing Then
                    Dim targetType As Type = existing.GetType()

                    For Each methodInfo As MethodInfo In targetType.GetMethods()
                        RegisterActionImplementation(context, actionCatalog, existing, idToBuild, methodInfo)
                    Next
                End If
            End If

            Return MyBase.BuildUp(context, typeToBuild, existing, idToBuild)
        End Function

        Public Overrides Function TearDown(ByVal context As Microsoft.Practices.ObjectBuilder.IBuilderContext, ByVal item As Object) As Object
            Dim workItem As WorkItem = GetWorkItem(context, item)

            If Not workItem Is Nothing Then
                Dim actionCatalog As IActionCatalogService = workItem.Services.Get(Of IActionCatalogService)()

                If Not actionCatalog Is Nothing Then
                    Dim targetType As Type = item.GetType()

                    For Each methodInfo As MethodInfo In targetType.GetMethods()
                        RemoveActionImplementation(context, actionCatalog, item, methodInfo)
                    Next
                End If
            End If
            Return MyBase.TearDown(context, item)
        End Function

        Private Sub RemoveActionImplementation(ByVal context As IBuilderContext, ByVal catalog As IActionCatalogService, ByVal existing As Object, ByVal methodInfo As MethodInfo)
            For Each attr As ActionAttribute In methodInfo.GetCustomAttributes(GetType(ActionAttribute), True)
                catalog.RemoveActionImplementation(attr.ActionName)

                TraceTearDown(context, existing, "Action implementation removed for action {0}, for the method {1} on the type {2}.", attr.ActionName, methodInfo.Name, existing.GetType().Name)
            Next
        End Sub

        Private Sub RegisterActionImplementation(ByVal context As IBuilderContext, ByVal catalog As IActionCatalogService, ByVal existing As Object, ByVal idToBuild As String, ByVal methodInfo As MethodInfo)
            For Each attr As ActionAttribute In methodInfo.GetCustomAttributes(GetType(ActionAttribute), True)
                Dim actionDelegate As ActionDelegate = CType(System.Delegate.CreateDelegate(GetType(ActionDelegate), existing, methodInfo), ActionDelegate)
                catalog.RegisterActionImplementation(attr.ActionName, actionDelegate)

                ' TODO: Add to resources
                TraceBuildUp(context, existing.GetType(), idToBuild, "Action implementation built for action {0}, for the method {1} on the type {2}.", attr.ActionName, methodInfo.Name, existing.GetType().Name)
            Next
        End Sub

        Private Function GetWorkItem(ByVal context As IBuilderContext, ByVal item As Object) As WorkItem
            If TypeOf item Is WorkItem Then
                Return TryCast(item, WorkItem)
            End If

            Return context.Locator.Get(Of WorkItem)(New DependencyResolutionLocatorKey(GetType(WorkItem), Nothing))
        End Function
    End Class
End Namespace
