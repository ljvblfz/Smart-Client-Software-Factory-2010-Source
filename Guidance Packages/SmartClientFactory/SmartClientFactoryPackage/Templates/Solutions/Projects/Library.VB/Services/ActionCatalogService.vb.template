'----------------------------------------------------------------------------------------
'patterns & practices - Smart Client Software Factory - Guidance Package

'This file was generated by this guidance package as part of the solution template

'The ActionCatalogService class provides the ability to conditionally execute code based upon 
'aspects of a program that can change at run time 

' 


'Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
'----------------------------------------------------------------------------------------

Imports System.Collections.Generic
Imports Microsoft.Practices.CompositeUI
Imports Microsoft.Practices.CompositeUI.Utility
Imports $RootNamespace$.Infrastructure.Interface.Services

Namespace Services

    Public Class ActionCatalogService
        Implements IActionCatalogService

        Private _specificActionConditions As New Dictionary(Of String, List(Of IActionCondition))
        Private _generalActionConditions As New List(Of IActionCondition)
        Private _actionImplementations As New Dictionary(Of String, ActionDelegate)


        Public Sub RegisterSpecificCondition(ByVal action As String, ByVal actionCondition As [Interface].Services.IActionCondition) Implements [Interface].Services.IActionCatalogService.RegisterSpecificCondition

            Guard.ArgumentNotNullOrEmptyString(action, "action")
            Guard.ArgumentNotNull(actionCondition, "actionCondition")

            Dim conditions As List(Of IActionCondition) = Nothing

            If _specificActionConditions.TryGetValue(action, conditions) Then
                Dim registered As IActionCondition = Nothing

                Dim actionConditionType As Type = CType(actionCondition, Object).GetType()

                For Each condition As IActionCondition In conditions
                    Dim conditionType As Type = CType(condition, Object).GetType()
                    If conditionType Is actionConditionType Then
                        registered = condition
                    End If
                Next

                If Not registered Is Nothing Then
                    Throw New ActionCatalogException()
                End If

                conditions.Add(actionCondition)
            Else
                _specificActionConditions.Add(action, New List(Of IActionCondition)())
                _specificActionConditions(action).Add(actionCondition)
            End If

        End Sub

        Public Sub RegisterGeneralCondition(ByVal actionCondition As [Interface].Services.IActionCondition) Implements [Interface].Services.IActionCatalogService.RegisterGeneralCondition

            Guard.ArgumentNotNull(actionCondition, "actionCondition")

            Dim registered As IActionCondition = Nothing

            Dim actionConditionType As Type = CType(actionCondition, Object).GetType()

            For Each condition As IActionCondition In _generalActionConditions
                Dim conditionType As Type = CType(condition, Object).GetType()
                If conditionType Is actionConditionType Then
                    registered = condition
                End If
            Next

            If Not registered Is Nothing Then
                Throw New ActionCatalogException
            End If

            _generalActionConditions.Add(actionCondition)
        End Sub

        Public Function CanExecute(ByVal action As String) As Boolean Implements [Interface].Services.IActionCatalogService.CanExecute
            Return CanExecute(action, Nothing, Nothing, Nothing)
        End Function

        Public Function CanExecute(ByVal action As String, ByVal context As WorkItem, ByVal caller As Object, ByVal target As Object) As Boolean Implements [Interface].Services.IActionCatalogService.CanExecute
            Guard.ArgumentNotNullOrEmptyString(action, "action")

            Dim result As Boolean = True
            Dim conditions As List(Of IActionCondition) = BuildActionConditionPipeline(action)

            For Each condition As IActionCondition In conditions
                result = result And condition.CanExecute(action, context, caller, target)
            Next

            Return result

        End Function

        Public Sub RemoveSpecificCondition(ByVal action As String, ByVal actionCondition As [Interface].Services.IActionCondition) Implements [Interface].Services.IActionCatalogService.RemoveSpecificCondition
            Guard.ArgumentNotNullOrEmptyString(action, "action")
            Guard.ArgumentNotNull(actionCondition, "actionCondition")

            Dim conditions As List(Of IActionCondition) = Nothing

            If _specificActionConditions.TryGetValue(action, conditions) Then
                conditions.Remove(actionCondition)
            End If
        End Sub

        Public Sub RemoveGeneralCondition(ByVal actionCondition As [Interface].Services.IActionCondition) Implements [Interface].Services.IActionCatalogService.RemoveGeneralCondition
            Guard.ArgumentNotNull(actionCondition, "actionCondition")

            _generalActionConditions.Remove(actionCondition)
        End Sub

        Public Sub RegisterActionImplementation(ByVal action As String, ByVal actionDelegate As [Interface].Services.ActionDelegate) Implements [Interface].Services.IActionCatalogService.RegisterActionImplementation
            Guard.ArgumentNotNullOrEmptyString(action, "action")
            Guard.ArgumentNotNull(actionDelegate, "actionDelegate")

            _actionImplementations(action) = actionDelegate
        End Sub

        Public Sub RemoveActionImplementation(ByVal action As String) Implements [Interface].Services.IActionCatalogService.RemoveActionImplementation
            Guard.ArgumentNotNullOrEmptyString(action, "action")

            _actionImplementations.Remove(action)
        End Sub

        Public Sub Execute(ByVal action As String, ByVal context As Microsoft.Practices.CompositeUI.WorkItem, ByVal caller As Object, ByVal target As Object) Implements [Interface].Services.IActionCatalogService.Execute
            Guard.ArgumentNotNullOrEmptyString(action, "action")

            Dim actionDelegate As ActionDelegate = Nothing

            If CanExecute(action, context, caller, target) Then
                If _actionImplementations.TryGetValue(action, actionDelegate) Then
                    actionDelegate(caller, target)
                End If
            End If
        End Sub

        Private Function BuildActionConditionPipeline(ByVal action As String) As List(Of IActionCondition)
            Dim pipeline As New List(Of IActionCondition)(_generalActionConditions)
            Dim conditions As List(Of IActionCondition) = Nothing

            If _specificActionConditions.TryGetValue(action, conditions) Then
                pipeline.AddRange(conditions)
            End If

            Return pipeline
        End Function
    End Class

End Namespace
