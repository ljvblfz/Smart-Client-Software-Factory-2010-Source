'----------------------------------------------------------------------------------------
'patterns & practices - Smart Client Software Factory - Guidance Package
'
'This file was generated by this guidance package as part of the solution template
'
'The SolutionProfileV2Parser class provides the implementation for v2 of the Profile Catalog
'
' 

'
'Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
'----------------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports $RootNamespace$.$safeprojectname$.SolutionProfileV2
Imports $RootNamespace$.$safeprojectname$.Services
Imports Microsoft.Practices.CompositeUI.Configuration

Namespace Services

    Public Class SolutionProfileV2Parser
        Implements ISolutionProfileParser

        Public Const _Namespace As String = "http://schemas.microsoft.com/pag/cab-profile/2.0"

        Public Function Parse(ByVal xml As String) As Microsoft.Practices.CompositeUI.Configuration.IModuleInfo() Implements Services.ISolutionProfileParser.Parse
            Dim solution As SolutionProfileV2.SolutionProfileElement = XmlValidationHelper.DeserializeXML(Of SolutionProfileV2.SolutionProfileElement)(xml, "SolutionProfileV2.xsd", _Namespace)

            Dim dmis As New List(Of DependentModuleInfo)

            If Not solution.Section Is Nothing Then
                Dim section As SectionElement
                For Each section In solution.Section
                    Dim moduleInfo As ModuleInfoElement
                    For Each moduleInfo In section.Modules
                        Dim dmi As DependentModuleInfo = New DependentModuleInfo(moduleInfo.AssemblyFile)
                        SetModuleName(moduleInfo, dmi)
                        SetModuleRoles(moduleInfo, dmi)
                        SetSectionDependencies(solution.Section, section, dmi)
                        SetModuleDependencies(moduleInfo, dmi)
                        dmis.Add(dmi)
                    Next
                Next
            End If

            Return dmis.ToArray()
        End Function

        Private Shared Sub SetModuleName(ByVal configModuleInfo As SolutionProfileV2.ModuleInfoElement, ByVal resultModuleInfo As DependentModuleInfo)
            resultModuleInfo.SetName(configModuleInfo.Name)

            ' If no name in config, check metadata
            If resultModuleInfo.Name Is Nothing Then
                resultModuleInfo.SetName(ModuleMetadataReflectionHelper.GetModuleName(resultModuleInfo.AssemblyFile))
            End If

            ' If still no name, generate one
            If resultModuleInfo.Name Is Nothing Then
                resultModuleInfo.SetName(Guid.NewGuid().ToString())
            End If

            ' Push the "true" name back into the object graph so we can find it later
            configModuleInfo.Name = resultModuleInfo.Name
        End Sub

        Private Shared Sub SetModuleRoles(ByVal moduleInfo As SolutionProfileV2.ModuleInfoElement, ByVal dmi As DependentModuleInfo)
            If (Not moduleInfo.Roles Is Nothing) AndAlso (moduleInfo.Roles.Length > 0) Then
                For Each role As SolutionProfileV2.RoleElement In moduleInfo.Roles
                    dmi.AddRoles(role.Allow)
                Next
            End If
        End Sub
        Private Shared Sub SetSectionDependencies(ByVal sections() As SolutionProfileV2.SectionElement, ByVal section As SolutionProfileV2.SectionElement, ByVal dmi As DependentModuleInfo)
            If section.Dependencies Is Nothing Then
                Return
            End If

            For Each dep As SolutionProfileV2.DependencyElement In section.Dependencies
                Dim dependentSectionFound As Boolean = False

                For Each sec As SolutionProfileV2.SectionElement In sections
                    If sec.Name = dep.Name Then
                        dependentSectionFound = True
                        For Each moduleInfo As SolutionProfileV2.ModuleInfoElement In sec.Modules
                            dmi.Dependencies.Add(moduleInfo.Name)
                        Next

                        Exit For
                    End If
                Next

                If Not dependentSectionFound Then
                    Throw New InvalidOperationException(String.Format(My.Resources.DependencyNotFound, section.Name, dep.Name))
                End If
            Next
        End Sub

        Private Shared Sub SetModuleDependencies(ByVal moduleInfo As SolutionProfileV2.ModuleInfoElement, ByVal dmi As DependentModuleInfo)
            If moduleInfo.Dependencies Is Nothing Then
                CType(dmi.Dependencies, List(Of String)).AddRange(ModuleMetadataReflectionHelper.GetModuleDependencies(dmi.AssemblyFile))
            Else
                For Each dep As SolutionProfileV2.DependencyElement In moduleInfo.Dependencies
                    dmi.Dependencies.Add(dep.Name)
                Next
            End If
        End Sub
    End Class
End Namespace
