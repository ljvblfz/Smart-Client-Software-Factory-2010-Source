'----------------------------------------------------------------------------------------
'patterns & practices - Smart Client Software Factory - Guidance Package
'
'This file was generated by this guidance package as part of the solution template
'
'The EntityTranslatorService class is a service that provides a registry of
'translators and translation services between two classes. The user must implement
'the translators and register them with the service.
' 
' 

'
'Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
'----------------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports $RootNamespace$.Infrastructure.Interface.Services

Namespace Services

    Public Class EntityTranslatorService
        Implements IEntityTranslatorService

        Private _translators As New List(Of IEntityTranslator)

        Public Sub RegisterEntityTranslator(ByVal translator As [Interface].Services.IEntityTranslator) Implements [Interface].Services.IEntityTranslatorService.RegisterEntityTranslator
            If translator Is Nothing Then
                Throw New ArgumentNullException("translator")
            End If

            _translators.Add(translator)
        End Sub

        Public Sub RemoveEntityTranslator(ByVal translator As [Interface].Services.IEntityTranslator) Implements [Interface].Services.IEntityTranslatorService.RemoveEntityTranslator
            If translator Is Nothing Then
                Throw New ArgumentNullException("translator")
            End If

            _translators.Remove(translator)
        End Sub

        Public Function CanTranslate(Of TTarget, TSource)() As Boolean Implements [Interface].Services.IEntityTranslatorService.CanTranslate
            Return CanTranslate(GetType(TTarget), GetType(TSource))
        End Function

        Public Function CanTranslate(ByVal targetType As System.Type, ByVal sourceType As System.Type) As Boolean Implements [Interface].Services.IEntityTranslatorService.CanTranslate
            If targetType Is Nothing Then
                Throw New ArgumentNullException("targetType")
            End If
            If sourceType Is Nothing Then
                Throw New ArgumentNullException("sourceType")
            End If

            Return IsArrayConversionPossible(targetType, sourceType) OrElse FindTranslator(targetType, sourceType) Is Nothing
        End Function

        Public Function Translate(Of TTarget)(ByVal source As Object) As TTarget Implements [Interface].Services.IEntityTranslatorService.Translate
            Return CType(Translate(GetType(TTarget), source), TTarget)
        End Function

        Public Function Translate(ByVal targetType As System.Type, ByVal source As Object) As Object Implements [Interface].Services.IEntityTranslatorService.Translate
            If targetType Is Nothing Then
                Throw New ArgumentNullException("targetType")
            End If

            If source Is Nothing Then
                If targetType.IsArray Then
                    Return Nothing
                Else
                    Throw New ArgumentNullException("source")
                End If
            End If

            Dim sourceType As Type = source.GetType()

            If IsArrayConversionPossible(targetType, sourceType) Then
                Return TranslateArray(targetType, source)
            Else
                Dim translator As IEntityTranslator = FindTranslator(targetType, sourceType)
                If Not translator Is Nothing Then
                    Return translator.Translate(Me, targetType, source)
                End If
            End If

            Throw New EntityTranslatorException("No translator is available to perform the operation.")
        End Function

        Private Function TranslateArray(ByVal targetType As Type, ByVal source As Object) As Object
            Dim targetItemType As Type = targetType.GetElementType()
            Dim sourceArray As Array = CType(source, Array)
            Dim result As Array = CType(Activator.CreateInstance(targetType, sourceArray.Length), Array)
            Dim i As Integer
            For i = 0 To sourceArray.Length - 1 Step i + 1
                Dim value As Object = sourceArray.GetValue(i)
                If Not value Is Nothing Then
                    result.SetValue(Translate(targetItemType, sourceArray.GetValue(i)), i)
                End If
            Next
            Return result
        End Function

        Private Function IsArrayConversionPossible(ByVal targetType As Type, ByVal sourceType As Type) As Boolean
            If targetType.IsArray AndAlso targetType.GetArrayRank() = 1 AndAlso sourceType.IsArray AndAlso sourceType.GetArrayRank() = 1 Then
                Return CanTranslate(targetType.GetElementType(), sourceType.GetElementType())
            End If
            Return False
        End Function

        Private Function FindTranslator(ByVal targetType As Type, ByVal sourceType As Type) As IEntityTranslator

            Dim translator As IEntityTranslator = Nothing

            For Each trans As IEntityTranslator In _translators
                If trans.CanTranslate(targetType, sourceType) Then
                    translator = trans
                    Exit For
                End If
            Next

            Return translator
        End Function
    End Class
End Namespace
