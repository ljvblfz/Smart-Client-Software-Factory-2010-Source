'----------------------------------------------------------------------------------------
'patterns & practices - Smart Client Software Factory - Guidance Package
'
'This file was generated by this guidance package as part of the solution template
'
'The DependentModuleLoaderService class provides a module loader that can 
'manage more complex dependencies and grouping of modules
' 
' 

'
'Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
'----------------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Diagnostics
Imports System.Globalization
Imports System.IO
Imports System.Reflection
Imports System.Threading
Imports Microsoft.Practices.CompositeUI
Imports Microsoft.Practices.CompositeUI.Configuration
Imports Microsoft.Practices.CompositeUI.Services
Imports Microsoft.Practices.CompositeUI.Utility
Imports Microsoft.Practices.ObjectBuilder

Namespace Services

    Public Class DependentModuleLoaderService
        Implements IModuleLoaderService

        Private _loadedModules As New Dictionary(Of Assembly, ModuleMetadata)
        Private _traceSource As TraceSource = Nothing

        <InjectionConstructor()> _
        Public Sub New(<ClassNameTraceSource()> ByVal traceSource As TraceSource)
            Me._traceSource = traceSource
        End Sub

        Public ReadOnly Property LoadedModules() As System.Collections.Generic.IList(Of Microsoft.Practices.CompositeUI.Services.LoadedModuleInfo) Implements Microsoft.Practices.CompositeUI.Services.IModuleLoaderService.LoadedModules
            Get
                Dim result As New List(Of LoadedModuleInfo)

                For Each moduleMetaData As ModuleMetadata In Me._loadedModules.Values
                    result.Add(moduleMetaData.ToLoadedModuleInfo())
                Next

                Return result.AsReadOnly()
            End Get
        End Property


        Public Sub Load(ByVal workItem As Microsoft.Practices.CompositeUI.WorkItem, ByVal ParamArray modules() As Microsoft.Practices.CompositeUI.Configuration.IModuleInfo) Implements Microsoft.Practices.CompositeUI.Services.IModuleLoaderService.Load

            Guard.ArgumentNotNull(workItem, "workItem")
            Guard.ArgumentNotNull(modules, "modules")

            InnerLoad(workItem, modules)
        End Sub

        Public Sub Load(ByVal workItem As Microsoft.Practices.CompositeUI.WorkItem, ByVal ParamArray assemblies() As System.Reflection.Assembly) Implements Microsoft.Practices.CompositeUI.Services.IModuleLoaderService.Load
            Guard.ArgumentNotNull(workItem, "workItem")
            Guard.ArgumentNotNull(assemblies, "assemblies")

            Dim modules As New List(Of IModuleInfo)

            For Each assembly As Assembly In assemblies
                modules.Add(New ModuleInfo(assembly))
            Next

            InnerLoad(workItem, modules.ToArray())
        End Sub

        Protected Overridable Sub OnModuleLoaded(ByVal loadedModule As LoadedModuleInfo)
            RaiseEvent ModuleLoaded(Me, New DataEventArgs(Of LoadedModuleInfo)(loadedModule))
        End Sub

        Private Sub InnerLoad(ByVal workItem As WorkItem, ByVal modules() As IModuleInfo)
            If modules.Length = 0 Then
                Return
            End If

            Dim allowedModules() As IModuleInfo = FilterModulesBasedOnRole(modules)

            LoadAssemblies(allowedModules)

            Dim loadOrder As List(Of ModuleMetadata) = GetLoadOrder()

            For Each moduleData As ModuleMetadata In loadOrder
                moduleData.LoadServices(workItem)
            Next

            For Each moduleData As ModuleMetadata In loadOrder
                moduleData.InitializeWorkItemExtensions(workItem)
            Next

            For Each moduleData As ModuleMetadata In loadOrder
                moduleData.InitializeModuleClasses(workItem)
            Next

            For Each moduleData As ModuleMetadata In loadOrder
                moduleData.NotifyOnLoadedModule(New Action(Of LoadedModuleInfo)(AddressOf OnModuleLoaded))
            Next
        End Sub

        Private Function FilterModulesBasedOnRole(ByVal modules As IModuleInfo()) As IModuleInfo()
            Dim allowedModules As New List(Of IModuleInfo)

            For Each moduleInfo As IModuleInfo In modules
                If moduleInfo.AllowedRoles.Count = 0 Then
                    allowedModules.Add(moduleInfo)
                Else
                    For Each role As String In moduleInfo.AllowedRoles
                        If Thread.CurrentPrincipal.IsInRole(role) Then
                            allowedModules.Add(moduleInfo)
                            Exit For
                        End If
                    Next
                End If
            Next

            Return allowedModules.ToArray()
        End Function

        Private Function GetLoadOrder() As List(Of ModuleMetadata)
            Dim indexedInfo As New Dictionary(Of String, ModuleMetadata)
            Dim solver As New ModuleDependencySolver()
            Dim result As New List(Of ModuleMetadata)

            For Each data As ModuleMetadata In _loadedModules.Values
                If indexedInfo.ContainsKey(data.Name) Then
                    Throw New ModuleLoadException(String.Format(CultureInfo.CurrentCulture, My.Resources.DuplicatedModule, data.Name))
                End If

                indexedInfo.Add(data.Name, data)
                solver.AddModule(data.Name)

                For Each dependency As String In data.Dependencies
                    solver.AddDependency(data.Name, dependency)
                Next
            Next

            If solver.ModuleCount > 0 Then
                Dim loadOrder As String() = solver.Solve()

                For i As Integer = 0 To loadOrder.Length - 1 Step i + 1
                    result.Add(indexedInfo(loadOrder(i)))
                Next
            End If

            Return result
        End Function

        Private Sub LoadAssemblies(ByVal modules As IModuleInfo())
            For Each moduleInfo As IModuleInfo In modules
                GuardLegalAssemblyFile(moduleInfo)
                Dim assembly As Assembly = LoadAssembly(moduleInfo.AssemblyFile)
                If Not _loadedModules.ContainsKey(assembly) Then
                    _loadedModules.Add(assembly, New ModuleMetadata(assembly, _traceSource, moduleInfo))
                End If
            Next
        End Sub

        Private Function LoadAssembly(ByVal assemblyFile As String) As Assembly
            Guard.ArgumentNotNullOrEmptyString(assemblyFile, "assemblyFile")
            assemblyFile = GetModulePath(assemblyFile)
            Dim file As FileInfo = New FileInfo(assemblyFile)
             Dim assemblyLoaded As Assembly = Nothing
            Try
                assemblyLoaded = Assembly.LoadFrom(file.FullName)
            Catch ex As Exception
                Throw New ModuleLoadException(assemblyFile, ex.Message, ex)
            End Try
            If Not _traceSource Is Nothing Then
                _traceSource.TraceInformation(My.Resources.LogModuleAssemblyLoaded, file.FullName)
            End If
            Return assemblyLoaded
        End Function

        Private Function GetModulePath(ByVal assemblyFile As String) As String
            If Not Path.IsPathRooted(assemblyFile) Then
                assemblyFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, assemblyFile)
            End If

            Return assemblyFile
        End Function

#Region "Guards"

        Private Sub GuardLegalAssemblyFile(ByVal modInfo As IModuleInfo)
            Guard.ArgumentNotNull(modInfo, "modInfo")
            Guard.ArgumentNotNull(modInfo.AssemblyFile, "modInfo.AssemblyFile")

            Dim assemblyFilePath As String = GetModulePath(modInfo.AssemblyFile)

            If Not File.Exists(assemblyFilePath) Then
                Throw New ModuleLoadException(String.Format(CultureInfo.CurrentCulture, My.Resources.ModuleNotFound, assemblyFilePath))

            End If
        End Sub

#End Region

#Region "Helper classes"

        Class ModuleMetadata

            Private _assembly As Assembly
            Private _loadedServices As Boolean = False
            Private _modulesInitialized As Boolean = False
            Private _extensionsInitialized As Boolean = False
            Private _name As String = Nothing
            Private _notified As Boolean = False

            Private _dependencies As New List(Of String)
            Private _moduleTypes As New List(Of Type)
            Private _moduleClasses As New List(Of IModule)
            Private _roles As New List(Of String)
            Private _services As New List(Of ServiceMetadata)
            Private _workItemExtensions As New List(Of KeyValuePair(Of Type, Type))
            Private _workItemRootExtensions As New List(Of Type)

            Private _traceSource As TraceSource

            Public Sub New(ByVal assembly As Assembly, ByVal traceSource As TraceSource, ByVal moduleInfo As IModuleInfo)
                Me._assembly = assembly
                Me._traceSource = traceSource

                If TypeOf moduleInfo Is IDependentModuleInfo Then
                    _name = CType(moduleInfo, IDependentModuleInfo).Name
                    _dependencies.AddRange(CType(moduleInfo, IDependentModuleInfo).Dependencies)
                Else
                    For Each attr As ModuleAttribute In assembly.GetCustomAttributes(GetType(ModuleAttribute), True)
                        _name = attr.Name
                    Next

                    For Each attr As ModuleDependencyAttribute In assembly.GetCustomAttributes(GetType(ModuleDependencyAttribute), True)
                        _dependencies.Add(attr.Name)
                    Next
                End If

                For Each type As Type In assembly.GetExportedTypes()
                    For Each attr As ServiceAttribute In type.GetCustomAttributes(GetType(ServiceAttribute), True)
                        Dim registrationType As Type = attr.RegisterAs

                        If registrationType Is Nothing Then
                            registrationType = type
                        End If

                        _services.Add(New ServiceMetadata(type, registrationType, attr.AddOnDemand))
                    Next

                    For Each attr As WorkItemExtensionAttribute In type.GetCustomAttributes(GetType(WorkItemExtensionAttribute), True)
                        _workItemExtensions.Add(New KeyValuePair(Of Type, Type)(attr.WorkItemType, type))
                    Next

                    For Each attr As RootWorkItemExtensionAttribute In type.GetCustomAttributes(GetType(RootWorkItemExtensionAttribute), True)
                        _workItemRootExtensions.Add(type)
                    Next

                    If (Not type.IsAbstract) AndAlso (GetType(IModule).IsAssignableFrom(type)) Then
                        _moduleTypes.Add(type)
                    End If
                Next
            End Sub

            Public ReadOnly Property Dependencies() As IEnumerable(Of String)
                Get
                    Return Me._dependencies
                End Get
            End Property

            Public Property Name() As String
                Get
                    If Me._name Is Nothing Then
                        _name = _assembly.FullName
                    End If


                    Return _name
                End Get
                Set(ByVal value As String)
                    _name = value
                End Set
            End Property

            Public Sub LoadServices(ByVal workItem As WorkItem)
                If _loadedServices Then
                    Return
                End If

                _loadedServices = True
                EnsureModuleClassesExist(workItem)

                Try
                    For Each moduleClass As IModule In _moduleClasses
                        moduleClass.AddServices()

                        If Not _traceSource Is Nothing Then
                            _traceSource.TraceInformation(My.Resources.AddServicesCalled, moduleClass)

                        End If
                    Next

                    For Each svc As ServiceMetadata In _services
                        If svc.AddOnDemand Then
                            workItem.Services.AddOnDemand(svc.InstanceType, svc.RegistrationType)

                            If Not _traceSource Is Nothing Then
                                _traceSource.TraceInformation(My.Resources.ServiceAddedOnDemand, Name, svc.InstanceType)
                            End If
                        Else
                            workItem.Services.AddNew(svc.InstanceType, svc.RegistrationType)

                            If Not _traceSource Is Nothing Then
                                _traceSource.TraceInformation(My.Resources.ServiceAdded, Name, svc.InstanceType)
                            End If
                        End If
                    Next

                Catch ex As Exception
                    ThrowModuleLoadException(ex)
                End Try
            End Sub

            Private Sub EnsureModuleClassesExist(ByVal workItem As WorkItem)
                If _moduleClasses.Count = _moduleTypes.Count Then
                    Return
                End If

                Try
                    For Each moduleType As Type In _moduleTypes
                        Dim moduleImpl As IModule = CType(workItem.Items.AddNew(moduleType), IModule)
                        _moduleClasses.Add(moduleImpl)

                        If Not _traceSource Is Nothing Then
                            _traceSource.TraceInformation(My.Resources.LogModuleAdded, moduleType)
                        End If
                    Next
                Catch ex As FileNotFoundException
                    ThrowModuleReferenceException(ex)
                Catch ex As Exception
                    ThrowModuleLoadException(ex)
                End Try
            End Sub

            Public Sub InitializeModuleClasses(ByVal workItem As WorkItem)
                If _modulesInitialized Then
                    Return
                End If

                _modulesInitialized = True
                EnsureModuleClassesExist(workItem)

                Try
                    For Each moduleImpl As IModule In _moduleClasses
                        moduleImpl.Load()

                        If Not _traceSource Is Nothing Then
                            _traceSource.TraceInformation(My.Resources.ModuleStartCalled, moduleImpl)
                        End If
                    Next
                Catch ex As FileNotFoundException
                    ThrowModuleReferenceException(ex)
                Catch ex As Exception
                    ThrowModuleLoadException(ex)
                End Try
            End Sub

            Public Sub InitializeWorkItemExtensions(ByVal workItem As WorkItem)
                If _extensionsInitialized Then
                    Return
                End If

                _extensionsInitialized = True

                Dim svc As IWorkItemExtensionService = workItem.Services.Get(Of IWorkItemExtensionService)()

                If svc Is Nothing Then
                    Return
                End If

                For Each kvp As KeyValuePair(Of Type, Type) In _workItemExtensions
                    svc.RegisterExtension(kvp.Key, kvp.Value)
                Next

                For Each type As Type In _workItemRootExtensions
                    svc.RegisterRootExtension(type)
                Next

            End Sub

            Public Sub NotifyOnLoadedModule(ByVal action As Action(Of LoadedModuleInfo))
                If _notified Then
                    Return
                End If

                _notified = True

                action(ToLoadedModuleInfo())
            End Sub

            Public Function ToLoadedModuleInfo() As LoadedModuleInfo
                Return New LoadedModuleInfo(_assembly, Name, _roles, _dependencies)
            End Function

            Private Sub ThrowModuleLoadException(ByVal innerException As Exception)
                Throw New ModuleLoadException(Name, String.Format(CultureInfo.CurrentCulture, My.Resources.FailedToLoadModule, _assembly.FullName, innerException.Message))
            End Sub

            Private Sub ThrowModuleReferenceException(ByVal innerException As Exception)
                Throw New ModuleLoadException(Name, My.Resources.ReferencedAssemblyNotFound, innerException)
            End Sub
        End Class

        Class ServiceMetadata
            Public AddOnDemand As Boolean = False
            Public InstanceType As Type = Nothing
            Public RegistrationType As Type = Nothing

            Sub New(ByVal instanceType As Type, ByVal registrationType As Type, ByVal addOnDemand As Boolean)
                Me.InstanceType = instanceType
                Me.RegistrationType = registrationType
                Me.AddOnDemand = addOnDemand
            End Sub
        End Class

        Class ClassNameTraceSourceAttribute
            Inherits TraceSourceAttribute

            Public Sub New()
                MyBase.New(GetType(ModuleLoaderService).FullName)
            End Sub
        End Class

#End Region

        Public Event ModuleLoaded(ByVal sender As Object, ByVal e As Utility.DataEventArgs(Of LoadedModuleInfo)) Implements Microsoft.Practices.CompositeUI.Services.IModuleLoaderService.ModuleLoaded
        
    End Class
End Namespace
